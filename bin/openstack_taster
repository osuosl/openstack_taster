#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'English'

suites = {
  'security' => 'Runs the security test suite',
  'volumes' => 'Runs the volume test suite'
}
settings = {}

ARGV << '-h' if ARGV.empty?

parser = OptionParser.new do |opts|
  opts.banner = "Usage: openstack_taster -i <image_name> -u <ssh_user> [-s suite_name] [--create-snapshot]\n"
  opts.separator('')
  opts.separator('Available Arguments:')
  opts.on('-i', '--image=<image_name>', 'Image name to use for the instance.') do |i|
    settings[:image_name] = i
  end
  opts.on('-u', '--user=<ssh_user>', 'SSH username for logging into the instance.') do |u|
    settings[:ssh_user] = u
  end
  opts.on('-s', '--suite=<suite_name>', 'Test suite(s) to use.') do |s|
    settings[:suite] = s
  end
  opts.on('-f', '--flavor=<flavor>', 'Set flavor for the instance.') do |f|
    settings[:flavor] = f
  end
  opts.on('-c', '--create-snapshot', 'Create snapshot upon test failure.') do
    settings[:create_snapshot] = true
  end
  opts.on('-h', '--help', 'Print usage information.') do
    puts opts
    settings[:exit] = true
  end
  opts.on('-v', '--version', 'Print program version.') do
    project_root = File.expand_path(File.dirname(File.dirname(__FILE__)))
    spec_path = File.join(project_root, 'openstack_taster.gemspec')
    
    spec = Gem::Specification::load(spec_path)
    puts spec.version
    
    settings[:exit] = true
  end
  opts.separator('')
  opts.separator('Test Suites:')
  suites.each do |suite, desc|
    opts.separator("    #{suite}\t\t#{desc}")
  end
end

begin
  parser.parse!
  mandatory = [:image_name, :ssh_user]
  missing = mandatory.select { |p| settings[p].nil? }
  raise OptionParser::MissingArgument, missing.join(', ') unless missing.empty? || settings[:exit] == true
rescue OptionParser::MissingArgument
  puts
  puts 'Error: ' + $ERROR_INFO.to_s
  puts
  puts parser unless settings[:exit] == true
  exit 1
rescue OptionParser::InvalidOption => io
  puts io.message
  puts
  puts parser
  exit 1
rescue StandardError => e
  puts 'Argument parsing failed:'
  puts e.message
  puts e.backtrace
  exit 1
end

exit if settings[:exit] # exit inside OptionParser causes problems.

begin
  if settings[:suite].nil?
    suites.each_key { |suite| settings[suite.to_sym] = true }
  else
    raise "#{settings[:suite]} is not a test suite!" unless suites.include? settings[:suite]
    settings[settings[:suite].to_sym] = true
  end
rescue StandardError => e
  puts e.message
  puts
  puts parser
  exit(1)
end

settings[:flavor] = 'm1.tiny' if settings[:flavor].nil?

require 'fog/openstack'
require 'openstack_taster'

auth_url = String.new(ENV['OS_AUTH_URL'])
auth_url.freeze

OPENSTACK_CREDS = {
  openstack_api_key:  ENV['OS_PASSWORD'],
  openstack_auth_url: auth_url,
  openstack_domain_name: ENV['OS_USER_DOMAIN_NAME'],
  openstack_project_name: ENV['OS_PROJECT_NAME'],
  openstack_username: ENV['OS_USERNAME'],
}.freeze

SSH_KEYS = {
  keypair: ENV['OS_SSH_KEYPAIR'],
  private_key: ENV['OS_PRIVATE_SSH_KEY'],
  public_key: ENV['OS_PUBLIC_SSH_KEY'] # REVIEW
}.freeze

controller_host = auth_url.split(':')[1].delete('//')
LOG_DIR = "logs/#{controller_host}"

compute = Fog::OpenStack::Compute.new(OPENSTACK_CREDS)
volume  = Fog::OpenStack::Volume.new(OPENSTACK_CREDS)
image   = Fog::OpenStack::Image.new(OPENSTACK_CREDS)
network = Fog::OpenStack::Network.new(OPENSTACK_CREDS)

exit OpenStackTaster.new(
  compute, volume, image, network, ENV['OS_NETWORK_REF'], settings[:flavor],
  SSH_KEYS, LOG_DIR
).taste(settings[:image_name], settings)
